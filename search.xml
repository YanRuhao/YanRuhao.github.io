<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[07.18模拟考试总结]]></title>
    <url>%2F2019%2F07%2F18%2F07-17-kao-shi%2F</url>
    <content type="text"><![CDATA[今日考试出了这题，被虐的死去活来 (说白了就是不会写) 。在听完讲解后收获颇丰，既然没有题解那就来写 (水) 一篇吧。 题目描述 VasilyVasilyVasily有一个栅栏，你可以将它看做由 nnn 个垂直的木板组成。每个木板的宽为 111 个单位，从左到右第 iii 块木板高为 hihihi 个单位。现在这些木板都是彼此相连构成了一个完整的栅栏。 由于VasilyVasilyVasily厌倦了这种布局，他希望将某些木板砍去一部分。要求满足以下限制条件： 1. 砍去的部分只能是木板的上部。(否则栅栏就立不起来了) 2. 砍去的部分必须相连（只有上下左右四个方向算相连，左上角等不算相连）。 3. 每块木板只能砍去整数单位的高度和 111 个单位的宽度。 4. 不能将某块木板全部砍去，即每块木板至少保留 111 个单位的高度。（这样才能保证剩余的木板依旧能构成一个完整的栅栏） 现在VasilyVasilyVasily想知道他有多少种砍的方案。由于这个数可能很大，你需要输出它对 100000000710000000071000000007 取模后的答案。 分析 对于题目，由于必须保留一行，我们可以事先将所有的 hhh 减一，就不要考虑最后一行不能拆的限制了。 然后，对于此题，不难看出是一道动态规划问题，由于 1&lt;=n&lt;=10000001&lt;=n&lt;=10000001&lt;=n&lt;=1000000 ,我们只能考虑 O(n)O(n)O(n) 的转移。对于第 iii 列 , 如何判断其拆卸的高度？考虑到对于任何一列，只有位于一段中最左端，中间，与最右端，如下图：lll即左端栅栏，rrr即右端栅栏。 不难得出，当其位于左端时，其可拆除高度仅仅只与本身与下一列的高度的最小值有关，即 f[l]=min(h[l],h[l+1])f[l] = min(h[l], h[l + 1])f[l]=min(h[l],h[l+1])。易得，当其位于中间时， f[i]=min(h[i−1],h[i],h[i+1])f[i] = min(h[i - 1], h[i], h[i + 1])f[i]=min(h[i−1],h[i],h[i+1]) ,右端同理。 由此，转移方程则可推出来，我们可用 f[i][0/1]f[i][0/1]f[i][0/1] 代表该栅栏拆的时候，0/10/10/1表示其后一列是否被拆除，111表示其被拆除，000表示没有。那么有： f[1][0]=h[1];f[1][0] = h[1];f[1][0]=h[1]; f[1][1]=min(h[1],h[2]);f[1][1] = min(h[1], h[2]);f[1][1]=min(h[1],h[2]); 而对于余下部分，则可有其位于中间，与位于左端之和得出 f[i][1]=min(h[i−1],h[i],h[i+1])∗f[i−1][1]+min(h[i],h[i+1])f[i][1] = min(h[i - 1], h[i], h[i + 1]) * f[i - 1][1] + min(h[i], h[i + 1])f[i][1]=min(h[i−1],h[i],h[i+1])∗f[i−1][1]+min(h[i],h[i+1]) f[i][0]=min(h[i−1],h[i])∗f[i−1][1]+h[i]f[i][0] = min(h[i - 1], h[i]) * f[i - 1][1] + h[i]f[i][0]=min(h[i−1],h[i])∗f[i−1][1]+h[i] 最终， ans=∑i=1nf[i][0]ans = \sum\limits_{i = 1}^{n}f[i][0]ans=i=1∑n​f[i][0] 。还有对于此题，由于其数据很大，对于模数的处理还需多加小心。 就这样，愉快的解决了此题，附代码： #include &lt;cstdio&gt;#include &lt;cstdlib&gt;#include &lt;cstring&gt;#include &lt;cmath&gt;#include &lt;iostream&gt;#include &lt;cctype&gt;#include &lt;queue&gt;#include &lt;algorithm&gt;using namespace std;const int mo = 1e9 + 7;const int maxn = 1000000 + 100;int n, m, k, ans;int h[maxn], f[maxn][2];inline int read() &#123; int s = 0, f = 0; char ch = getchar(); while (!isdigit(ch)) f |= ch == '-', ch = getchar(); while (isdigit(ch)) s = (s&lt;&lt;3) + (s&lt;&lt;1) + (ch^48), ch = getchar(); return f ? -s : s;&#125;int main() &#123; n = read(); for (int i = 1; i &lt;= n; i++) h[i] = read() - 1; // 预先减去1，方便后续操作 f[1][0] = h[1]; f[1][1] = min(h[1], h[2]); //初始化 for (int i = 2; i &lt;= n; i++) &#123; f[i][1] = (1ll * min(h[i - 1], min(h[i], h[i + 1])) * f[i - 1][1] + min(h[i], h[i + 1])) % mo; f[i][0] = (1ll * min(h[i - 1], h[i]) * f[i - 1][1] + h[i]) % mo; //转移 &#125; for (int i = 1; i &lt;= n; i++) ans = (ans + f[i][0]) % mo; //求和 printf("%d\n", ans); return 0;&#125;]]></content>
  </entry>
  <entry>
    <title><![CDATA[DP优化————前缀和优化]]></title>
    <url>%2F2019%2F07%2F17%2Fdp-qian-zhui-he%2F</url>
    <content type="text"><![CDATA[众所周知，动态规划在NOIPNOIPNOIP联赛中占有很重要的比例，而动态规划的优化则成为提升动态规划时间复杂度与空间复杂度的重要方法，近期有幸学习了几个优化方法，写点东西总结一下。 一、前缀和优化 前缀和，顾名思义，即前面iii个数的总和。例如NOIP2015NOIP2015NOIP2015提高组中，子串一题则运用了这种方法。 NOIP2015NOIP2015NOIP2015提高组 子串 题目描述 有两个仅包含小写英文字母的字符串AAA和BBB。 现在要从字符串AAA中取出kkk个互不重叠的非空子串，然后把这kkk个子串按照其在字符串AAA中出现的顺序依次连接起来得到一个新的字符串。请问有多少种方案可以使得这个新串与字符串BBB相等？由于答案可能很大，所以这里要求输出答案对 100000000710000000071000000007 取模的结果。 注意：子串取出的位置不同也认为是不同的方案。 说明 数据保证 1≤n≤1000,1≤m≤200,1≤k≤m1≤n≤1000,1≤m≤200,1≤k≤m1≤n≤1000,1≤m≤200,1≤k≤m。 有两个仅包含小写英文字母的字符串 AAA 和 BBB。 现在要从字符串 AAA 中取出 kkk 个互不重叠的非空子串，然后把这 kkk 个子串按照其在字符串 AAA 中出现的顺序依次连接起来得到一个新的字符串。请问有多少种方案可以使得这个新串与字符串 BBB 相等？ 注意：子串取出的位置不同也认为是不同的方案。]]></content>
      <categories>
        <category>编程</category>
      </categories>
      <tags>
        <tag>动态规划</tag>
        <tag>斜率优化</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[写代码的小女孩]]></title>
    <url>%2F2019%2F07%2F16%2Fthe-girl-who-write-code%2F</url>
    <content type="text"><![CDATA[天冷极了，下着雪，又快黑了。这是NOIP的前夜。在这又冷又黑的晚上，一个衣衫破烂的小女孩在机房敲着代码。她从班里逃出来的时候还拿着一本算导，但是有什么用呢？那是一本很破旧的书——那么大，一向是她妈妈垫桌角的。她默写SPFA的时候，年级主任突然冲进机房，吓得她把算导都丢掉了。书叫一个学数竞捡起来拿着跑了。他说，他可以用那本书当草纸，证明切比雪夫定理。小女孩只好自己写二叉堆，一双小脚冻得红一块青一块的。她面前的草纸堆得满满的，上面全是DP转移方程。这一整天，没有一个OJ让她AC一道题，她已经交了32遍采药了。 可怜的小女孩！她又冷又饿，浑身战栗地写着二叉堆。CRT显示器发出的光落在她的枯黄的长头发上，那干枯的头发打成卷儿披在肩上，看上去就像二叉树，不过她没注意这些。每个显示器里都透出光来，机房里飘着一股CPU发糊的怪味，因为这是NOIP前夜——她可忘不了这个。 她在主函数前面停了下来，蜷着趴在键盘上。她觉得更冷了。她不敢回家，因为她还没调完二叉堆，没写对一个DP方程，教练一定会骂她的。再说，换成别的数据结构，一样写不出来。这些题都太水，虽然神犇都写过题解了，但是题解上一般都只有三个字：傻X题。 她几乎绝望了。啊，哪怕一个函数不会RE，对她也是有好处的！她每写一遍程序，跑出来的结果就不一样，要是她有数据，她就知道哪一个程序是算对了的。她得不到数据了，因为机房上不去网了，全校的网速都让隔壁的年级主任拿来下小电影了。如果能保证下一个程序能AC，她就敢再写几十KB的代码，但是她是不敢啊，她怕又算出来一个奇葩的结果来。 她新建了一个cpp重写了程序。编译通过了了，样例过了。这次，她感觉自己站在IOI的考场中AK。学校的大门上，贴着“我校学生以国际金牌向110周年校庆献礼”的条幅。在班级内的非诚勿扰中，全班男生都给她留了灯。这时候，程序又RE了，她面前只有cmd上的黑底白字。 她又写了一道模拟。这一回，她坐在美丽的二叉堆下。这棵二叉堆，比她在丽洁代码中看到的常数还要小，还要短。眼前是许多优美动人的ASCII码，那些都是她写的程序，各种可爱的指针在跳跃着，满世界都是系统栈，都在向她眨眼睛。小女孩向眼前的系统栈伸出手去。这时候，眼前的ASCII码还在，条幅还在，指针还在，年级主任还是和蔼地微笑着。只见那些代码那些指针越升越高越升越高，最后成了在天空中闪烁的星星。 有一颗星星落下来了，在天空中划出了一道细长的红光。 “有一个什么人快要死了。”小女孩说。唯一疼她的学姐保送之前告诉过她：一颗星星落下来，就有一个灵魂要到上帝那儿去了。她notepad++中又写了一个快排。这一回，她把能用的IDE都用了。学姐出现在亮光里，是那么温和，那么快乐。 “学姐！”小女孩叫起来，“啊！请把我带走吧！我知道，系统栈一溢出，您就会不见的，像那校门的条幅，浮点数的精度，循环队列的空间一个样，就会不见的！”她赶紧编译了5KB的高精度模板，要把学姐留住。一大把程序发出强烈的光，把机房照得跟白天一样明亮。学姐从来没有像现在这样温柔，这样美丽。她把小女孩抱起来，搂在怀里。她们俩在光明和快乐中飞走了，越飞越高，飞到那没有DP，没有图论，也没有数据结构的地方去了。第二天清晨，这个小女孩坐在机房里，两腮通红，嘴上带着微笑。她死了，在NOIP的前夜死了。NOIP Day1的太阳升起来了，照在她小小的尸体上。小女孩坐在那儿，显示器上还有一坨编译过的代码。“她想好好复习复赛。”人们说。谁也不知道她曾经看到过多么美丽的东西，她曾经多么幸福，跟着她学姐一起走向新世界的幸福中去。 星星之火，终将成燎原之势]]></content>
      <categories>
        <category>其他</category>
      </categories>
      <tags>
        <tag>心得</tag>
        <tag>杂项</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[二分图简单介绍]]></title>
    <url>%2F2019%2F07%2F08%2Fer-fen-tu%2F</url>
    <content type="text"><![CDATA[典型二分图染色的基本操作，此题对学习二分图有很大的帮助，同时因为很多题解对此介绍不太详细，而且有些模拟算法有误，故写此篇，介绍一下二分图及其操作。 什么是二分图 二分图又称作二部图，是图论中的一种特殊模型。 设G=(V,E)是一个无向图，如果顶点V可分割为两个互不相交的子集(A,B)，并且图中的每条边（i，j）所关联的两个顶点i和j分别属于这两个不同的顶点集(i in A,j in B)，则称图G为一个二分图。 G=(V, E)，其中G代表图，V代表这个图的所有顶点的集合，E代表这个图所有连线的集合。现如今如果能将V这个顶点集分成两个互不相交的子集A、B，E这个边集内所有边的两个顶点分别属于A、B两个子集的话，我们就称这个图为二分图。 结合下图，相信可以对二分图有一个初步的了解。 二分图最大配 在图论中，匹配是指两两没有公共点的边集。 二分图最大匹配指：给出一个二分图，找一个边数最大的匹配，即选择尽量多的边，使得任意两条选中的边均没有公共点。]]></content>
  </entry>
  <entry>
    <title><![CDATA[Hash利器——康托展开]]></title>
    <url>%2F2019%2F03%2F09%2Fa%2F</url>
    <content type="text"><![CDATA[最近又重新来写神奇的八数码题目，发现中间hash用到了康托展开，于是在百度的帮助下来介绍一下康托展开～ #include &lt;cstdio&gt;#include &lt;cstdlib&gt;#include &lt;cmath&gt;#include &lt;cctype&gt;#include &lt;stack&gt;#include &lt;cstring&gt;#include &lt;iostream&gt;#include &lt;algorithm&gt;using namespace std;const int mo = 19260817;int n, m, x, y, num;int a[1000010];int f[] = &#123;1,1,2,6,24,120,720,5040,40320,362880&#125;;inline int read() &#123; int s = 0, f = 0; char ch = getchar(); while (!isdigit(ch)) f |= ch == '-', ch = getchar(); while (isdigit(ch)) s = (s&lt;&lt;3) + (s&lt;&lt;1) + (ch^48), ch = getchar(); return f ? -s : s;&#125;int cantor(int num[], int n) &#123; int ans = 0, sum = 0; for (int i = 1; i &lt; n; i++) &#123; for (int j = i + 1; j &lt;= n; j++) &#123; if (a[i] &gt; a[j]) sum++; &#125; ans += sum * f[n - i]; sum = 0; &#125; return ans + 1;&#125;int main() &#123; freopen("luogu.in", "r", stdin); n = read(); for (int i = 1; i &lt;= n; i++) scanf("%1d", &amp;a[i]); printf("%d\n", cantor(a, n)); return 0;&#125;]]></content>
      <tags>
        <tag>康托展开</tag>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[网络流————最大流问题]]></title>
    <url>%2F2019%2F01%2F13%2Fzui-da-liu%2F</url>
    <content type="text"><![CDATA[#include&lt;cstdio&gt;#include&lt;cstdlib&gt;#include&lt;cstring&gt;#include&lt;cmath&gt;#include&lt;iostream&gt;#include&lt;cctype&gt;#include&lt;queue&gt;#include&lt;algorithm&gt;using namespace std;const int inf=19260817;int n,m,s,t;int p[10010],vis[10010],e[2010][2010];inline int read()&#123; int f=0,s=0; char ch=getchar(); while(!isdigit(ch)) f|=ch=='-',ch=getchar(); while(isdigit(ch)) s=(s&lt;&lt;3)+(s&lt;&lt;1)+(ch^48),ch=getchar(); return f?-s:s;&#125;int bfs(int s,int t)&#123; queue &lt;int&gt; q; memset(vis,0,sizeof(vis)); p[s]=s; vis[s]=1; q.push(s); while(!q.empty())&#123; int x=q.front();q.pop(); for(int i=1;i&lt;=m;i++)&#123; if(e[x][i] &amp;&amp; !vis[i])&#123; p[i]=x; vis[i]=1; if(i==t) return 1; q.push(i); &#125; &#125; &#125; return 0;&#125;int ek(int s,int t)&#123; int ans=0; while(bfs(s,t))&#123; int d=inf; for(int i=t;i!=s;i=p[i]) d=min(d,e[p[i]][i]); for(int i=t;i!=s;i=p[i])&#123; e[p[i]][i]-=d; e[i][p[i]]+=d; &#125; ans+=d; &#125; return ans;&#125;int main()&#123; n=read(),m=read(); for(int i=1;i&lt;=n;i++)&#123; int u=read(),v=read(),w=read(); e[u][v]=w; &#125; printf("%d\n",ek(1,m)); return 0;&#125;]]></content>
      <categories>
        <category>编程</category>
      </categories>
      <tags>
        <tag>网络流</tag>
        <tag>最大流</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[元旦欢乐%你赛解析]]></title>
    <url>%2F2018%2F12%2F30%2Fyun-dan-huan-le-sai%2F</url>
    <content type="text"><![CDATA[戊戌年12月30日夜，大雪纷飞，当日，元旦模拟赛举行… (编不下去了) T1 全民皆兵 问题描述 由于突如其来的外来入侵，地球防卫总部大大放宽了银河战队的选拔条件，现在紧急向全世界选拔银河战士来保卫地球。终于，从世界巡回海选中有n个人脱颖而出，每一个人都有一个较高的战斗值。地球防卫总部要求在最后选出来的人中任何两个人都必须是没有一点关系的（包括亲戚关系），这样才能保证在战场上每位战士都能心无杂念地奋勇杀敌。可恰恰不幸的是，在这n个人当中，有某一些人具有一些很遥远的亲戚关系，比如A的父亲的父亲的父亲的父亲（……）与B的母亲的母亲的母亲的母亲（……）是夫妻，那么就说A与B有亲戚关系。再说明白点，比如A和B有亲戚关系，B和C有亲戚关系，那么A和C就有亲戚关系（算法也太清晰了吧……）。而现在地球防卫总部急想在1秒钟的时间内知道这n个人能组成多大的军队以及在保证人数最大的情况下的军队的最大战斗力（指军队中每个战士的战斗值之和）是多少，所以就把这个任务叫给了号称“编程天才”的你来解决。 输入说明 第一行一个数n；（30%的数据n&lt;=10；100%的数据n&lt;=300000；） 第二行n个数，第i个数表示第i战士的战斗值； 接下来若干行(行数&lt;=n)，每行两个数Ai和Bi，表示Ai和Bi两位战士具有微妙的亲戚关系。 输入数据保证不出现Ai=Bi的情况，但一种情况多次出现是允许的，谁叫他们两太亲呢！ 答案保证在longint范围内。 输出说明 共两行，每行一个数； 第一行为最大军队人数； 第二行为军队的最大战斗力。 样例输入 10291 2306 668 2710 1524 1318 602 2991 2881 29514 69 44 79 110 17 101 9 样例输出 510440 T2 通讯线路 问题描述 某地区共有n座村庄，每座村庄的坐标用一对整数(x, y)表示，现在要在村庄之间建立通讯网络。通讯工具有两种，分别是需要铺设的普通线路和卫星设备。卫星设备数量有限，只能给k个村庄配备卫星设备。拥有卫星设备的村庄互相间直接通讯；铺设了线路的村庄之间也可以通讯。卫星分配是不受限制的。 问怎样合理的分配卫星和铺设线路，使得在保证每两座村庄之间都可以直接或间接地通讯的前提下，铺设线路的总长度最短。 输入说明 第一行两个数：n，k（0≤k≤n≤2000） 接下来n行，每行两个整数(x,y)数描述一个村庄。（-10000≤x,y≤10000） 输出说明 仅一行，代表总长度，精确到0.0001 样例输入 20 8137 824761 1468 151194 758149 138314 90809 404964 877471 66177 54673 977397 560928 653199 486736 44985 801621 509444 14088 508556 327 样例输出 1355.4195 T3 墙壁粉刷 问题描述 现在需要粉刷一列墙壁，墙壁被分成n段，为了节约用钱，科学家决定只粉刷其中一些段，同是为了美观，科学家要求每连续的m段墙壁中至少有两块被粉刷，现在已知粉刷每一段墙壁的费用。科学家要你帮他求出最少的费用。 输入说明 第一行，n和m（2&lt;=n &lt;=10000，2&lt;=m&lt;=100） 第二行，n个非负整数，第i个数为粉刷第ｉ段的费用。（费用&lt;=10000） 输出说明 一行，最小费用。 样例输入 8 36 7 10 1 7 8 5 6 样例输出 30]]></content>
      <categories>
        <category>编程</category>
      </categories>
      <tags>
        <tag>2018</tag>
        <tag>最小生成树</tag>
        <tag>并查集</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[NOIP2008提高组——双栈队列]]></title>
    <url>%2F2018%2F11%2F27%2FTG2008-shuan-zhan-dui-lie%2F</url>
    <content type="text"><![CDATA[典型二分图染色的基本操作，此题对学习二分图有很大的帮助，同时因为很多题解对此介绍不太详细，而且有些模拟算法有误，故写此篇，介绍一下二分图及其操作。 什么是二分图 二分图又称作二部图，是图论中的一种特殊模型。 设G=(V,E)是一个无向图，如果顶点V可分割为两个互不相交的子集(A,B)，并且图中的每条边（i，j）所关联的两个顶点i和j分别属于这两个不同的顶点集(i in A,j in B)，则称图G为一个二分图。 G=(V, E)，其中G代表图，V代表这个图的所有顶点的集合，E代表这个图所有连线的集合。现如今如果能将V这个顶点集分成两个互不相交的子集A、B，E这个边集内所有边的两个顶点分别属于A、B两个子集的话，我们就称这个图为二分图。 结合下图，相信可以对二分图有一个初步的了解。 什么是染色 就是给对象标记一种“颜色”，其主要作用是便于分类，而不是实现真正意义上的染色。 故我们可以创建一个数组，每个数组的下标对应一个元素，数组的每个元素的值代表该对象标记的颜色。如此，就完成了染色这一步骤。 我们可以通过建立二维数组e[MAX][MAX]来实现二分图。二维数组的横向代表A顶点子集，纵向代表B顶点子集。如若两个顶点i,j有连接，则在对应的e[i][j] 与 e[j][i]处赋值为1。 我们可以通过dfs进行染色验证，判断其是否为二分图。 二分图的条件：通过深度优先搜索对每个顶点进行染色，如果相邻顶点颜色相同或者是同一顶点出现染不同颜色的情况，则说明该图不是二分图。 题目解析 此题题意还是很明确的，通过两个栈来进行排序操作，并且找出最小值。 方法便是二分图染色。对数字串进行两个两个逐次遍历，如果符合规则的便将二者连接起来，则当遍历结束后完成构图。然后通过dfs染色，确立真正的二分图。然后借助染色表(记录每个元素颜色的数组)，进行相应的push(), pop()操作，最终便能完成排序。具体规则如下： 对于任意两个数t[i]和t[j],它们不能压入同一个栈中的充要条件: 存在一个k,使得i&lt;j&lt;k且t[k]&lt;t[i]&lt;t[j]。 证明 ：利用反证法，假设当这t[i]，t[j]压入了同一个栈，那么压入t[k]，因为t[k]&lt;t[i]&lt;t[j]，显然，当t[k]没有被弹出的时候，另两个数也都不能被弹出，否则不符题意。而又因t[j]总是会在t[i]之前弹出，但t[j]&gt;t[i]，矛盾，所以假设不成立。 由此，我们便可根据这些来解决此题了。 #include&lt;cstdio&gt;#include&lt;cstdlib&gt;#include&lt;iostream&gt;#include&lt;algorithm&gt;#include&lt;stack&gt;#include&lt;cmath&gt;#define maxn 1004using namespace std;const int inf=19260817;int n,num;int color[maxn];int t[maxn]; //要排序的元素的存储int s[maxn]; //判断两个数字是否满足规则bool flag,e[maxn][maxn];void paint(int x,int c)&#123; //DFS进行染色 color[x]=c; for(int i=1;i&lt;=n;i++)&#123; if(e[x][i])&#123; //查找相邻点 if(color[i]==c) flag=false; //若相邻点颜色相同，则错误 if(!color[i]) paint(i,3-c); //若未染过色，对其染色，3-c结果为1,2，表示1与2号栈 &#125; &#125;&#125;void make()&#123; //创造二分图 s[n+1]=inf; for(int i=n;i&gt;=1;i--)&#123; s[i]=t[i]; if(s[i+1]&lt;s[i]) s[i]=s[i+1]; &#125; for(int i=1;i&lt;n;i++)&#123; for(int j=i+1;j&lt;n;j++)&#123; if(t[i]&lt;t[j] &amp;&amp; s[j+1]&lt;t[i])&#123; e[i][j]=e[j][i]=1; //按规则创建图 &#125; &#125; &#125; for(int i=1;i&lt;=n;i++)&#123; if(!color[i])&#123; //染色 paint(i,1); &#125; &#125;&#125;void work()&#123; if(flag==false)&#123; printf("0\n"); return ; &#125; stack&lt;int&gt; stack1,stack2; int now=1; for(int i=1;i&lt;=n;i++)&#123; if(color[i]==1)&#123; //入栈 stack1.push(t[i]); printf("a "); &#125; else &#123; stack2.push(t[i]); printf("c "); &#125; while((!stack1.empty() &amp;&amp; stack1.top()==now) || (!stack2.empty() &amp;&amp; stack2.top()==now))&#123; //判断是否弹出 if(!stack1.empty() &amp;&amp; stack1.top()==now)&#123; stack1.pop(); now++; printf("b "); &#125; else&#123; stack2.pop(); now++; printf("d "); &#125; &#125; &#125;&#125;int main()&#123; flag=1; scanf("%d",&amp;n); for(int i=1;i&lt;=n;i++)&#123; scanf("%d",&amp;t[i]); &#125; make(); work(); return 0;&#125;]]></content>
      <categories>
        <category>编程</category>
      </categories>
      <tags>
        <tag>2008</tag>
        <tag>提高组</tag>
        <tag>二分图</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[NOIP2008题解报告]]></title>
    <url>%2F2018%2F11%2F17%2FNOIP2008%E9%A2%98%E8%A7%A3%E6%8A%A5%E5%91%8A%2F</url>
    <content type="text"><![CDATA[Oh !!! T1 #include&lt;cstdio&gt;#include&lt;cstdlib&gt;#include&lt;cstring&gt;#include&lt;cmath&gt;#include&lt;iostream&gt;#include&lt;cctype&gt;using namespace std;int n,m,minn=19260817,maxx=-19260817;int num[27];char s[110];bool pd(int x)&#123; if(x==1 || x==0) return 0; for(int i=2;i&lt;=sqrt(x);i++) if(x%i==0) return 0; return 1;&#125;int main()&#123; cin&gt;&gt;s; for(int i=0;i&lt;strlen(s);i++)&#123; num[s[i]-'a'+1]++; &#125; for(int i=1;i&lt;=26;i++)&#123; if(num[i]!=0 &amp;&amp; num[i]&gt;maxx) maxx=num[i]; if(num[i]!=0 &amp;&amp; num[i]&lt;minn) minn=num[i]; &#125; if(pd(maxx-minn)) printf("Lucky Word\n%d\n",maxx-minn); else printf("No Answer\n0\n"); return 0;&#125; Oh !!! T2 #include&lt;cstdio&gt;#include&lt;cstdlib&gt;#include&lt;cstring&gt;#include&lt;cmath&gt;#include&lt;iostream&gt;#include&lt;cctype&gt;using namespace std;int k,m,n,sum;int a[10]=&#123;6,2,5,5,4,5,6,3,7,6&#125;;int work(int x)&#123; int num=0; while(x/10!=0)&#123; num+=a[x%10]; x/=10; &#125; return num+a[x];&#125;int main()&#123; scanf("%d",&amp;n); n=n-4; for(int i=0;i&lt;=1111;i++)&#123; for(int j=0;j&lt;=1111;j++)&#123; if(work(i)+work(j)+work(i+j)==n) sum++; &#125; &#125; printf("%d",sum); return 0;&#125;]]></content>
      <categories>
        <category>编程</category>
      </categories>
      <tags>
        <tag>历届真题</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[NOIP2018提高组游记]]></title>
    <url>%2F2018%2F11%2F11%2F2018%E6%B8%B8%E8%AE%B0%2F</url>
    <content type="text"><![CDATA[不在爆零中爆发，就在爆零中灭亡。 ———鲁迅 其实根本说不上是游记，因为我就在省城，还是离考点最近的学校… Day0]]></content>
      <categories>
        <category>生活</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[在Linux上玩Minecraft]]></title>
    <url>%2F2018%2F11%2F11%2Fmc%2F</url>
    <content type="text"><![CDATA[Minecraft作为一款高自由度沙盒游戏，想必很多人在Windows上面玩得很开心，由于辣鸡网易收购了Minecraft，导致国服只能通过网易，然而我们Linux上也不是不可以玩，下面带你开启划水之旅。 Step 1.下载HMCL启动器 这里，当然是选择Linux版本的啦！ Step 2.卸载系统自带Java(openJDK) 执行命令 sudo apt-get remove openjdk* Step 3.下载Java 8(oracle-java8) 这里，选择Linux x64 Step 4.安装Java 8(oracle-java8) 接下来有点难度了。所有路径自己选，只不过要自己对应修改。*是你下载的java版本号。 在图中选择位置的下划线后面的数字。 1.解压缩并移动 解压缩文件夹到桌面，cd到桌面，输入命令 sudo mv jre1.8.0_*/ /usr/local/ 2.配置环境变量 输入命令 sudo gedit /etc/environment 在末尾复制以下内容 JAVA_HOME="/usr/local/jre1.8.0_*"CLASSPATH="$JAVA_HOME/lib"PATH＝"$JAVA_HOME/bin" 3.安装jre环境 输入命令 sudo update-alternatives --install /usr/bin/java java /usr/local/jre1.8.0_*/bin/java 300 此时应该已经成功，输入命令检测 java -version 如果出现的是java而不是openJDK则说明安装成功！！跳过下一步。 4.选择正确jre 输入命令 sudo update-alternatives --config java 按照提示选择你刚刚安装的Java。 Step 5.启动HMCL启动器 cd到启动器目录，就是那个单文件，建议单独新建一个文件夹。 输入命令 java -jar 再来一个tab自动补全~~(美滋滋)~~，反正就是那个带HMCL的文件。 然后。。。就没有然后了！！ 后记 1.Java有两种，一种openjdk，一种oracle java，直接无法使用的原因应该是系统自带的是openjdk这种并不太普及的Java。 2.可以试试在不卸载自带Java的情况下安装Java 8，即跳过Step 2，也许就需要进行Step 4的第4部分。 3.运行过程中请不要关闭终端，如果嫌弃终端，请尝试以下命令 nohup java -jar HMCL-3.2.112.jar &amp; 也许你的文件名字不一样，请合理利用好tab自动补全。 4.成果展示]]></content>
      <categories>
        <category>其他</category>
      </categories>
      <tags>
        <tag>不务正业</tag>
      </tags>
  </entry>
</search>
